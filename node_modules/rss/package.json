{
  "name": "rss",
  "version": "1.1.1",
  "description": "RSS feed generator. Add RSS feeds to any project. Supports enclosures and GeoRSS.",
  "keywords": [
    "rss",
    "xml",
    "atom",
    "podcasts",
    "ghost",
    "feed",
    "feed builder",
    "rss feed"
  ],
  "main": "lib/index",
  "scripts": {
    "test": "tape test",
    "lint": "grunt lint",
    "test:browser": "prova -b"
  },
  "homepage": "http://github.com/dylang/node-rss",
  "author": {
    "name": "Dylan Greene",
    "email": "dylang@gmail.com"
  },
  "contributors": [
    {
      "name": "Dylan Greene",
      "email": "dylang@gmail.com"
    },
    {
      "name": "Xavier Damman",
      "email": "xdamman@gmail.com"
    },
    {
      "name": "Michael R. Lange"
    },
    {
      "name": "Victor Jonsson"
    },
    {
      "name": "Danny Graham"
    },
    {
      "name": "Patrick Garman",
      "email": "contact@pmgarman.me"
    },
    {
      "name": "Fred Morstatter"
    },
    {
      "name": "Eric Vantillard",
      "email": "eric.vantillard@evaxion.fr"
    },
    {
      "name": "Jason Karns",
      "email": "jasonkarns"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/dylang/node-rss.git"
  },
  "bugs": {
    "url": "http://github.com/dylang/node-rss/issues"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/latest",
      "firefox/latest",
      "safari/latest",
      "opera/latest",
      "iphone/latest",
      "ipad/latest",
      "android-browser/latest"
    ]
  },
  "dependencies": {
    "mime-types": "^2.0.3",
    "xml": "^1.0.0"
  },
  "devDependencies": {
    "folderify": "^0.6.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-release": "^0.9.0",
    "grunt-templates-dylang": "^1.0.0",
    "include-folder": "^0.7.0",
    "load-grunt-tasks": "^1.0.0",
    "mockdate": "^1.0.1",
    "prova": "^2.0.3",
    "q": "^1.0.0",
    "tape": "^3.0.3",
    "time-grunt": "^1.0.0",
    "xml2js": "^0.4.1"
  },
  "browserify": {
    "transform": [
      "folderify"
    ]
  },
  "licenses": "MIT",
  "readme": "## rss  [![Build Status](http://img.shields.io/travis/dylang/rss.svg?style=flat-square)](https://travis-ci.org/dylang/rss) [![rss](http://img.shields.io/npm/dm/rss.svg?style=flat-square)](https://www.npmjs.org/package/rss)\n\n> RSS feed generator. Add RSS feeds to any project. Supports enclosures and GeoRSS.\n\n\n\n\n\n\n\n\n### Usage\n\n#### Create a new feed\n\n```js\nvar RSS = require('rss');\n\nvar feed = new RSS(feedOptions);\n```\n\n##### `feedOptions`\n\n * `title` **string** Title of your site or feed\n * `description` _optional_ **string** A short description of the feed.\n * `generator` _optional_  **string** Feed generator.\n * `feed_url` **url string** Url to the rss feed.\n * `site_url` **url string** Url to the site that the feed is for.\n * `image_url` _optional_  **url string* Small image for feed readers to use.\n * `docs` _optional_ **url string** Url to documentation on this feed.\n * `managingEditor` _optional_ **string** Who manages content in this feed.\n * `webMaster` _optional_ **string** Who manages feed availability and technical support.\n * `copyright` _optional_ **string** Copyright information for this feed.\n * `language` _optional_ **string**  The language of the content of this feed.\n * `categories` _optional_ **array of strings**  One or more categories this feed belongs to.\n * `pubDate` _optional_ **Date object or date string** The publication date for content in the feed\n * `ttl` _optional_ **integer** Number of minutes feed can be cached before refreshing from source.\n * `hub` _optional_ **PubSubHubbub hub url** Where is the PubSubHub hub located.\n * `custom_namespaces` _optional_ **object** Put additional namespaces in <rss> element (without 'xmlns:' prefix)\n * `custom_elements` _optional_ **array** Put additional elements in the feed (node-xml syntax)\n\n#### Add items to a feed\n\nAn item can be used for a blog entry, project update, log entry, etc.  Your RSS feed\ncan have any number of items. Most feeds use 20 or fewer items.\n\n```js\nfeed.item(itemOptions);\n```\n\n##### itemOptions\n\n * `title` **string** Title of this particular item.\n * `description` **string** Content for the item.  Can contain html but link and image urls must be absolute path including hostname.\n * `url` **url string** Url to the item. This could be a blog entry.\n * `guid` **unique string** A unique string feed readers use to know if an item is new or has already been seen.\n If you use a guid never change it.  If you don't provide a guid then your item urls must\n be unique.\n * `categories` _optional_ **array of strings** If provided, each array item will be added as a category element\n * `author` _optional_  **string**  If included it is the name of the item's creator.\n If not provided the item author will be the same as the feed author.  This is typical\n except on multi-author blogs.\n * `date` **Date object or date string** The date and time of when the item was created.  Feed\n readers use this to determine the sort order. Some readers will also use it to determine\n if the content should be presented as unread.\n * `lat` _optional_ **number** The latitude coordinate of the item.\n * `long` _optional_ **number** The longitude coordinate of the item.\n * `custom_elements` _optional_ **array** Put additional elements in the item (node-xml syntax)\n\n##### Feed XML\n\n```js\nvar xml = feed.xml({indent: true});\n```\n\nThis returns the XML as a string.\n\n`indent` _optional_ **boolean or string** What to use as a tab. Defaults to no tabs (compressed).\nFor example you can use `'\\t'` for tab character, or `'  '` for two-space tabs. If you set it to\n`true` it will use four spaces.\n\n\n\n### Example Usage\n\n```js\nvar RSS = require('rss');\n\n/* lets create an rss feed */\nvar feed = new RSS({\n    title: 'title',\n    description: 'description',\n    feed_url: 'http://example.com/rss.xml',\n    site_url: 'http://example.com',\n    image_url: 'http://example.com/icon.png',\n    docs: 'http://example.com/rss/docs.html',\n    managingEditor: 'Dylan Greene',\n    webMaster: 'Dylan Greene',\n    copyright: '2013 Dylan Greene',\n    language: 'en',\n    categories: ['Category 1','Category 2','Category 3'],\n    pubDate: 'May 20, 2012 04:00:00 GMT',\n    ttl: '60',\n    customNamespaces: {\n      'itunes': 'http://www.itunes.com/dtds/podcast-1.0.dtd'\n    },\n    custom: [\n      {'itunes:subtitle': 'A show about everything'},\n      {'itunes:author': 'John Doe'},\n      {'itunes:summary': 'All About Everything is a show about everything. Each week we dive into any subject known to man and talk about it as much as we can. Look for our podcast in the Podcasts app or in the iTunes Store'},\n      {'itunes:owner': [\n        {'itunes:name': 'John Doe'},\n        {'itunes:email': 'john.doe@example.com'}\n      ]},\n      {'itunes:image': {\n        _attr: {\n          href: 'http://example.com/podcasts/everything/AllAboutEverything.jpg'\n        }\n      }},\n      {'itunes:category': [\n        {_attr: {\n          text: 'Technology'\n        }},\n        {'itunes:category': {\n          _attr: {\n            text: 'Gadgets'\n          }\n        }}\n      ]}\n    ]\n});\n\n/* loop over data and add to feed */\nfeed.item({\n    title:  'item title',\n    description: 'use this for the content. It can include html.',\n    url: 'http://example.com/article4?this&that', // link to the item\n    guid: '1123', // optional - defaults to url\n    categories: ['Category 1','Category 2','Category 3','Category 4'], // optional - array of item categories\n    author: 'Guest Author', // optional - defaults to feed author property\n    date: 'May 27, 2012', // any format that js Date can parse.\n    lat: 33.417974, //optional latitude field for GeoRSS\n    long: -111.933231, //optional longitude field for GeoRSS\n    enclosure: {url:'...', file:'path-to-file'}, // optional enclosure\n    custom: [\n      {'itunes:author': 'John Doe'},\n      {'itunes:subtitle': 'A short primer on table spices'},\n      {'itunes:image': {\n        _attr: {\n          href: 'http://example.com/podcasts/everything/AllAboutEverything/Episode1.jpg'\n        }\n      }},\n      {'itunes:duration': '7:04'}\n    ]\n});\n\n// cache the xml to send to clients\nvar xml = feed.xml();\n```\n\n\n\n\n\n### Notes\n\n * You do not need to escape anything. This module will escape characters when necessary.\n * This module is very fast but you might as well cache the output of xml() and serve\n it until something changes.\n\n\n\n### Inspiration\n\nI started this module *years* ago (April 2011) because there weren't any Node modules\nfor creating RSS. [Nearly 50 modules](https://npmjs.org/browse/depended/rss)\nuse RSS, as well as many web sites and the popular [Ghost publishing platform](https://ghost.org/).\n\n\n\n### Contributing\n\nContributions to the project are welcome. Feel free to fork and improve.\nI do my best accept pull requests in a timely manor, especially when tests and updated docs\nare included.\n\n\n\n### About the Author [![@dylang](https://img.shields.io/badge/github-dylang-green.svg?style=flat-square)](https://github.com/dylang) [![@dylang](https://img.shields.io/badge/twitter-dylang-blue.svg?style=flat-square)](https://twitter.com/dylang)\n\nHi! Thanks for checking `rss`! My name is **Dylan Greene**. When not overwhelmed with my two young kids I enjoy contributing\nto the open source community. I'm also a tech lead at [Opower](http://opower.com).\n\nHere's some of my other Node projects:\n\n| Name | Description | npm&nbsp;Downloads |\n|---|---|--:|--:|\n| [`gruntâ€‘notify`](https://github.com/dylang/grunt-notify) | Automatic desktop notifications for Grunt errors and warnings using Growl for OS X or Windows, Mountain Lion and Mavericks Notification Center, and Notify-Send. | [![grunt-notify](https://img.shields.io/npm/dm/grunt-notify.svg?style=flat-square)](https://www.npmjs.org/package/grunt-notify) |\n| [`gruntâ€‘prompt`](https://github.com/dylang/grunt-prompt) | Interactive prompt for your Grunt config using console checkboxes, text input with filtering, password fields. | [![grunt-prompt](https://img.shields.io/npm/dm/grunt-prompt.svg?style=flat-square)](https://www.npmjs.org/package/grunt-prompt) |\n| [`shortid`](https://github.com/dylang/shortid) | Amazingly short non-sequential url-friendly unique id generator. | [![shortid](https://img.shields.io/npm/dm/shortid.svg?style=flat-square)](https://www.npmjs.org/package/shortid) |\n| [`npmâ€‘check`](https://github.com/dylang/npm-check) | Check for outdated, incorrect, and unused dependencies. | [![npm-check](https://img.shields.io/npm/dm/npm-check.svg?style=flat-square)](https://www.npmjs.org/package/npm-check) |\n| [`xml`](https://github.com/dylang/node-xml) | Fast and simple xml generator. Supports attributes, CDATA, etc. Includes tests and examples. | [![xml](https://img.shields.io/npm/dm/xml.svg?style=flat-square)](https://www.npmjs.org/package/xml) |\n| [`changelog`](https://github.com/dylang/changelog) | Command line tool (and Node module) that generates a changelog in color output, markdown, or json for modules in npmjs.org's registry as well as any public github.com repo. | [![changelog](https://img.shields.io/npm/dm/changelog.svg?style=flat-square)](https://www.npmjs.org/package/changelog) |\n| [`gruntâ€‘attention`](https://github.com/dylang/grunt-attention) | Display attention-grabbing messages in the terminal | [![grunt-attention](https://img.shields.io/npm/dm/grunt-attention.svg?style=flat-square)](https://www.npmjs.org/package/grunt-attention) |\n| [`observatory`](https://github.com/dylang/observatory) | Beautiful UI for showing tasks running on the command line. | [![observatory](https://img.shields.io/npm/dm/observatory.svg?style=flat-square)](https://www.npmjs.org/package/observatory) |\n| [`anthology`](https://github.com/dylang/anthology) | Module information and stats for any @npmjs user | [![anthology](https://img.shields.io/npm/dm/anthology.svg?style=flat-square)](https://www.npmjs.org/package/anthology) |\n| [`gruntâ€‘cat`](https://github.com/dylang/grunt-cat) | Echo a file to the terminal. Works with text, figlets, ascii art, and full-color ansi. | [![grunt-cat](https://img.shields.io/npm/dm/grunt-cat.svg?style=flat-square)](https://www.npmjs.org/package/grunt-cat) |\n\n_This list was generated using [anthology](https://github.com/dylang/anthology)._\n\n\n### License\nCopyright (c) 2014 Dylan Greene, contributors.\n\nReleased under the [MIT license](https://tldrlegal.com/license/mit-license).\n\nScreenshots are [CC BY-SA](http://creativecommons.org/licenses/by-sa/4.0/) (Attribution-ShareAlike).\n\n***\n_Generated using [grunt-readme](https://github.com/assemble/grunt-readme) with [grunt-templates-dylang](https://github.com/dylang/grunt-templates-dylang) on Friday, December 19, 2014._\n\n",
  "readmeFilename": "readme.md",
  "_id": "rss@1.1.1",
  "dist": {
    "shasum": "544127cea803ef488e5e1daac8e83c8d1629dd7b"
  },
  "_from": "rss@1.1.1",
  "_resolved": "https://registry.npmjs.org/rss/-/rss-1.1.1.tgz"
}
